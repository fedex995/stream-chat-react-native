{"version":3,"sources":["MessageInput.tsx"],"names":["iconClose","require","Container","styled","View","imageUploads","theme","length","messageInput","container","conditionalPadding","css","EditingBoxContainer","editingBoxContainer","EditingBoxHeader","editingBoxHeader","EditingBoxHeaderTitle","Text","editingBoxHeaderTitle","InputBoxContainer","inputBoxContainer","MessageInput","props","ActionSheetAttachment","ActionSheetAttachmentDefault","actionSheetStyles","additionalTextInputProps","AttachButton","AttachButtonDefault","AttachmentFileIcon","compressImageQuality","disabledProp","disabled","doDocUploadRequest","doImageUploadRequest","FileUploadPreview","FileUploadPreviewDefault","hasFilePicker","hasImagePicker","ImageUploadPreview","ImageUploadPreviewDefault","initialValue","Input","maxNumberOfFiles","onChangeTextProp","onChangeText","parent_id","SendButton","SendButtonDefault","sendImageAsync","setInputRef","channel","disabledContext","members","watchers","client","clearEditingState","editing","editMessage","sendMessageContext","sendMessage","setInputBoxContainerRef","t","attachActionSheet","inputBoxRef","sending","asyncIds","setAsyncIds","asyncUploads","setAsyncUploads","fileUploads","mentionedUsers","numberOfUploads","setFileUploads","setImageUploads","setMentionedUsers","setNumberOfUploads","setText","text","current","focus","sendMessageAsync","id","image","state","FileState","UPLOAD_FAILED","UPLOADED","attachments","image_url","url","type","mentioned_users","show_in_channel","prevAsyncIds","splice","indexOf","prevAsyncUploads","prevNumberOfUploads","_error","console","log","Object","keys","forEach","appendText","newText","prevText","closeAttachActionSheet","hide","getMembers","result","values","member","push","user","getUsers","users","getWatchers","uniqueUsers","usersArray","isValidMessage","UPLOADING","file","keystroke","onSelectItem","item","prevMentionedUsers","pickFile","cancelled","docs","doc","mimeType","name","startsWith","uploadNewImage","uploadNewFile","pickImage","images","removeFile","some","prevFileUploads","filter","removeImage","prevImageUploads","handleOnPress","Keyboard","dismiss","show","renderInputContainer","additionalTextInputContainerProps","editable","undefined","triggerSettings","onMentionSelectItem","uploadFile","uploadImage","setAttachActionSheetRef","setInputBoxRef","updateMessage","clear","fallback","asset_url","file_size","size","mime_type","title","updatedMessage","updateMessagePromise","then","ref","newFile","map","fileUpload","response","uri","sendFile","warn","newImage","filename","replace","contentType","sendImage","res","includes","imageUpload","Promise","all","concat"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport {\n  ImageRequireSource,\n  Keyboard,\n  TextInput,\n  TextInputProps,\n  View,\n} from 'react-native';\nimport uniq from 'lodash/uniq';\nimport { lookup } from 'mime-types';\nimport {\n  Attachment,\n  logChatPromiseExecution,\n  SendFileAPIResponse,\n  Message as StreamMessage,\n  UserResponse,\n} from 'stream-chat';\n\nimport {\n  ActionSheetAttachment as ActionSheetAttachmentDefault,\n  ActionSheetProps,\n  ActionSheetStyles,\n} from './ActionSheetAttachment';\nimport {\n  AttachButton as AttachButtonDefault,\n  AttachButtonProps,\n} from './AttachButton';\nimport {\n  FileUploadPreview as FileUploadPreviewDefault,\n  FileUploadPreviewProps,\n} from './FileUploadPreview';\nimport {\n  ImageUploadPreview as ImageUploadPreviewDefault,\n  ImageUploadPreviewProps,\n} from './ImageUploadPreview';\nimport { SendButton as SendButtonDefault, SendButtonProps } from './SendButton';\n\nimport {\n  FileUpload,\n  ImageUpload,\n  useMessageDetailsForState,\n} from './hooks/useMessageDetailsForState';\nimport { generateRandomId } from './utils/generateRandomId';\n\nimport {\n  AutoCompleteInput,\n  AutoCompleteInputProps,\n} from '../AutoCompleteInput/AutoCompleteInput';\nimport { IconSquare } from '../IconSquare';\n\nimport {\n  ChannelContextValue,\n  useChannelContext,\n} from '../../contexts/channelContext/ChannelContext';\nimport { useChatContext } from '../../contexts/chatContext/ChatContext';\nimport {\n  isEditingBoolean,\n  useMessagesContext,\n} from '../../contexts/messagesContext/MessagesContext';\nimport { useSuggestionsContext } from '../../contexts/suggestionsContext/SuggestionsContext';\nimport { useTranslationContext } from '../../contexts/translationContext/TranslationContext';\nimport { pickDocument, pickImage as pickImageNative } from '../../native';\nimport { styled } from '../../styles/styledComponents';\nimport {\n  ACITriggerSettings,\n  FileState,\n  TriggerSettings,\n} from '../../utils/utils';\n\nimport type { ActionSheetCustom } from 'react-native-actionsheet';\n\nimport type { FileIconProps } from '../Attachment/FileIcon';\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../types/types';\n\nconst iconClose: ImageRequireSource = require('../../images/icons/icon_close.png');\n\nconst Container = styled.View<{ imageUploads: ImageUpload[] }>`\n  background-color: rgba(0, 0, 0, 0.05);\n  border-radius: 10px;\n  margin-horizontal: 10px;\n  padding-top: ${({ imageUploads, theme }) =>\n    imageUploads && imageUploads.length\n      ? theme.messageInput.container.conditionalPadding\n      : 0}px;\n  ${({ theme }) => theme.messageInput.container.css};\n`;\n\nconst EditingBoxContainer = styled.View`\n  background-color: white;\n  padding-horizontal: 0px;\n  shadow-color: grey;\n  shadow-opacity: 0.5;\n  z-index: 100;\n  ${({ theme }) => theme.messageInput.editingBoxContainer.css};\n`;\n\nconst EditingBoxHeader = styled.View`\n  align-items: center;\n  flex-direction: row;\n  justify-content: space-between;\n  padding: 10px;\n  ${({ theme }) => theme.messageInput.editingBoxHeader.css};\n`;\n\nconst EditingBoxHeaderTitle = styled.Text`\n  font-weight: bold;\n  ${({ theme }) => theme.messageInput.editingBoxHeaderTitle.css};\n`;\n\n// have to wrap the react-native View because styled-components don't work well with ref setting\nconst InputBoxContainer = styled(View)`\n  align-items: center;\n  flex-direction: row;\n  margin: 10px;\n  min-height: 46px;\n  padding-horizontal: 10px;\n  ${({ theme }) => theme.messageInput.inputBoxContainer.css};\n`;\n\nexport type MessageInputProps<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n> = {\n  /**\n   * Custom UI component for ActionSheetAttachment.\n   *\n   * Defaults to and accepts same props as: [ActionSheetAttachment](https://getstream.github.io/stream-chat-react-native/#actionsheetattachment)\n   */\n  ActionSheetAttachment?: React.ComponentType<ActionSheetProps>;\n  /**\n   * Style object for actionsheet (used for option to choose file attachment or photo attachment).\n   * Supported styles: https://github.com/beefe/react-native-actionsheet/blob/master/lib/styles.js\n   */\n  actionSheetStyles?: ActionSheetStyles;\n  /**\n   * Additional props for underlying TextInput component. These props will be forwarded as it is to TextInput component.\n   *\n   * @see See https://reactnative.dev/docs/textinput#reference\n   */\n  additionalTextInputProps?: TextInputProps;\n  /**\n   * Custom UI component for attach button.\n   *\n   * Defaults to and accepts same props as: [AttachButton](https://getstream.github.io/stream-chat-react-native/#attachbutton)\n   */\n  AttachButton?: React.ComponentType<AttachButtonProps>;\n  /**\n   * Custom UI component for attachment icon for type 'file' attachment in preview.\n   * Defaults to and accepts same props as: https://github.com/GetStream/stream-chat-react-native/blob/master/src/components/Attachment/FileIcon.tsx\n   */\n  AttachmentFileIcon?: React.ComponentType<FileIconProps>;\n  /**\n   * Compress image with quality (from 0 to 1, where 1 is best quality).\n   * On iOS, values larger than 0.8 don't produce a noticeable quality increase in most images,\n   * while a value of 0.8 will reduce the file size by about half or less compared to a value of 1.\n   * Image picker defaults to 0.8 for iOS and 1 for Android\n   */\n  compressImageQuality?: number;\n  /**\n   * Override of context disabled for disabling input only\n   */\n  disabled?: boolean;\n  /**\n   * Override file upload request\n   *\n   * @param file    File object - { uri: '', name: '' }\n   * @param channel Current channel object\n   */\n  doDocUploadRequest?: (\n    file: {\n      name: string;\n      size?: string | number;\n      type?: string;\n      uri?: string;\n    },\n    channel: ChannelContextValue<At, Ch, Co, Ev, Me, Re, Us>['channel'],\n  ) => Promise<SendFileAPIResponse>;\n  /**\n   * Override image upload request\n   *\n   * @param file    File object - { uri: '' }\n   * @param channel Current channel object\n   */\n  doImageUploadRequest?: (\n    file: {\n      name?: string;\n      uri?: string;\n    },\n    channel: ChannelContextValue<At, Ch, Co, Ev, Me, Re, Us>['channel'],\n  ) => Promise<SendFileAPIResponse>;\n  /**\n   * Custom UI component for FileUploadPreview.\n   * Defaults to and accepts same props as: https://github.com/GetStream/stream-chat-react-native/blob/master/src/components/MessageInput/FileUploadPreview.tsx\n   */\n  FileUploadPreview?: React.ComponentType<FileUploadPreviewProps>;\n  /** If component should have file picker functionality */\n  hasFilePicker?: boolean;\n  /** If component should have image picker functionality */\n  hasImagePicker?: boolean;\n  ImageUploadPreview?: React.ComponentType<ImageUploadPreviewProps>;\n  /** Initial value to set on input */\n  initialValue?: string;\n  /**\n   * Custom UI component for AutoCompleteInput.\n   * Defaults to and accepts same props as: https://github.com/GetStream/stream-chat-react-native/blob/master/src/components/AutoCompleteInput/AutoCompleteInput.tsx\n   */\n  Input?: React.ComponentType<\n    AutoCompleteInputProps<Co, Us> & {\n      _pickFile: () => Promise<void>;\n      _pickImage: () => Promise<void>;\n      _removeFile: FileUploadPreviewProps['removeFile'];\n      _removeImage: ImageUploadPreviewProps['removeImage'];\n      _uploadFile: FileUploadPreviewProps['retryUpload'];\n      _uploadImage: ImageUploadPreviewProps['retryUpload'];\n      appendText: (newText: string) => void;\n      closeAttachActionSheet: () => void;\n      disabled: boolean;\n      getUsers: () => UserResponse<Us>[];\n      handleOnPress: () => Promise<void>;\n      isValidMessage: () => boolean;\n      onSelectItem: (item: UserResponse<Us>) => void;\n      sendMessage: () => Promise<void>;\n      setInputBoxContainerRef: (ref: View | null) => void;\n      updateMessage: () => Promise<void>;\n      uploadNewFile: (file: {\n        name: string;\n        size?: number | string;\n        type?: string;\n        uri?: string;\n      }) => Promise<void>;\n      uploadNewImage: (image: { uri?: string }) => Promise<void>;\n    }\n  >;\n  /** Limit on allowed number of files to attach at a time. */\n  maxNumberOfFiles?: number;\n  /**\n   * Callback that is called when the text input's text changes. Changed text is passed as a single string argument to the callback handler.\n   *\n   * @param newText\n   */\n  onChangeText?: (newText: string) => void;\n  /** Parent message id - in case of thread */\n  parent_id?: StreamMessage<At, Me, Us>['parent_id'];\n  /**\n   * Custom UI component for send button.\n   *\n   * Defaults to and accepts same props as: [SendButton](https://getstream.github.io/stream-chat-react-native/#sendbutton)\n   */\n  SendButton?: React.ComponentType<SendButtonProps>;\n  /**\n   * For images still in uploading state when user hits send, send text immediately and send image as follow-up message once uploaded\n   */\n  sendImageAsync?: boolean;\n  /**\n   * ref for input setter function\n   */\n  setInputRef?: (ref: TextInput | null) => void;\n};\n\n/**\n * UI Component for message input\n * It's a consumer of\n * [Channel Context](https://getstream.github.io/stream-chat-react-native/#channelcontext),\n * [Chat Context](https://getstream.github.io/stream-chat-react-native/#chatcontext),\n * [Messages Context](https://getstream.github.io/stream-chat-react-native/#messagescontext),\n * [Suggestions Context](https://getstream.github.io/stream-chat-react-native/#suggestionscontext), and\n * [Translation Context](https://getstream.github.io/stream-chat-react-native/#translationcontext)\n *\n * @example ./MessageInput.md\n */\nexport const MessageInput = <\n  At extends DefaultAttachmentType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>(\n  props: MessageInputProps<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const {\n    ActionSheetAttachment = ActionSheetAttachmentDefault,\n    actionSheetStyles,\n    additionalTextInputProps,\n    AttachButton = AttachButtonDefault,\n    AttachmentFileIcon,\n    compressImageQuality,\n    disabled: disabledProp,\n    doDocUploadRequest,\n    doImageUploadRequest,\n    FileUploadPreview = FileUploadPreviewDefault,\n    hasFilePicker = true,\n    hasImagePicker = true,\n    ImageUploadPreview = ImageUploadPreviewDefault,\n    initialValue,\n    Input,\n    maxNumberOfFiles,\n    onChangeText: onChangeTextProp,\n    parent_id,\n    SendButton = SendButtonDefault,\n    sendImageAsync = false,\n    setInputRef,\n  } = props;\n\n  const {\n    channel,\n    disabled: disabledContext = false,\n    members,\n    watchers,\n  } = useChannelContext<At, Ch, Co, Ev, Me, Re, Us>();\n\n  const disabled = disabledProp || disabledContext;\n\n  const { client } = useChatContext<At, Ch, Co, Ev, Me, Re, Us>();\n\n  const {\n    clearEditingState,\n    editing,\n    editMessage,\n    sendMessage: sendMessageContext,\n  } = useMessagesContext<At, Ch, Co, Ev, Me, Re, Us>();\n\n  const { setInputBoxContainerRef } = useSuggestionsContext<Co, Us>();\n\n  const { t } = useTranslationContext();\n\n  const attachActionSheet = useRef<ActionSheetCustom | null>(null);\n  const inputBoxRef = useRef<TextInput | null>(null);\n  const sending = useRef(false);\n\n  const [asyncIds, setAsyncIds] = useState<string[]>([]);\n  const [asyncUploads, setAsyncUploads] = useState<{\n    [key: string]: {\n      state: string;\n      url: string;\n    };\n  }>({});\n\n  const {\n    fileUploads,\n    imageUploads,\n    mentionedUsers,\n    numberOfUploads,\n    setFileUploads,\n    setImageUploads,\n    setMentionedUsers,\n    setNumberOfUploads,\n    setText,\n    text,\n  } = useMessageDetailsForState<At, Ch, Co, Ev, Me, Re, Us>(\n    editing,\n    initialValue,\n  );\n\n  useEffect(() => {\n    if (editing && inputBoxRef.current) {\n      inputBoxRef.current.focus();\n    }\n  }, [editing]);\n\n  const sendMessageAsync = (id: string) => {\n    const image = asyncUploads[id];\n    if (!image || image.state === FileState.UPLOAD_FAILED) {\n      return;\n    }\n\n    if (image.state === FileState.UPLOADED) {\n      const attachments = [\n        {\n          image_url: image.url,\n          type: 'image',\n        },\n      ] as StreamMessage<At, Me, Us>['attachments'];\n\n      try {\n        sendMessageContext(({\n          attachments,\n          mentioned_users: [],\n          parent_id,\n          show_in_channel: true,\n          text: '',\n        } as unknown) as Partial<StreamMessage<At, Me, Us>>);\n\n        setAsyncIds((prevAsyncIds) =>\n          prevAsyncIds.splice(prevAsyncIds.indexOf(id), 1),\n        );\n        setAsyncUploads((prevAsyncUploads) => {\n          delete prevAsyncUploads[id];\n          return prevAsyncUploads;\n        });\n\n        setNumberOfUploads((prevNumberOfUploads) => prevNumberOfUploads - 1);\n      } catch (_error) {\n        console.log('Failed');\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (Object.keys(asyncUploads).length) {\n      /**\n       * When successful image upload response occurs after hitting send,\n       * send a follow up message with the image\n       */\n      sending.current = true;\n      asyncIds.forEach((id) => sendMessageAsync(id));\n      sending.current = false;\n    }\n  }, [asyncIds, asyncUploads, sending, sendMessageAsync]);\n\n  const appendText = (newText: string) => {\n    setText((prevText) => `${prevText}${newText}`);\n  };\n\n  const closeAttachActionSheet = () => {\n    if (attachActionSheet.current) {\n      /**\n       * Hide doesn't exist until we bump @types/react-native-actionsheet from this\n       * PR being merged: https://github.com/DefinitelyTyped/DefinitelyTyped/pull/48275\n       */\n      // @ts-expect-error\n      attachActionSheet.current.hide();\n    }\n  };\n\n  const getMembers = () => {\n    const result: UserResponse<Us>[] = [];\n    if (members && Object.values(members).length) {\n      Object.values(members).forEach((member) =>\n        result.push(member.user as UserResponse<Us>),\n      );\n    }\n\n    return result;\n  };\n\n  const getUsers = () => {\n    const users = [...getMembers(), ...getWatchers()];\n\n    // make sure we don't list users twice\n    const uniqueUsers: { [key: string]: UserResponse<Us> } = {};\n    for (const user of users) {\n      if (user && !uniqueUsers[user.id]) {\n        uniqueUsers[user.id] = user as UserResponse<Us>;\n      }\n    }\n    const usersArray = Object.values(uniqueUsers);\n\n    return usersArray;\n  };\n\n  const getWatchers = () => {\n    const result: UserResponse<Us>[] = [];\n    if (watchers && Object.values(watchers).length) {\n      result.push(...(Object.values(watchers) as UserResponse<Us>[]));\n    }\n\n    return result;\n  };\n\n  /** Checks if the message is valid or not. Accordingly we can enable/disable send button */\n  const isValidMessage = () => {\n    if (text) {\n      return true;\n    }\n\n    for (const image of imageUploads) {\n      if (!image || image.state === FileState.UPLOAD_FAILED) {\n        continue;\n      }\n      if (image.state === FileState.UPLOADING) {\n        // TODO: show error to user that they should wait until image is uploaded\n        return false;\n      }\n\n      return true;\n    }\n\n    for (const file of fileUploads) {\n      if (!file || file.state === FileState.UPLOAD_FAILED) {\n        continue;\n      }\n      if (file.state === FileState.UPLOADING) {\n        // TODO: show error to user that they should wait until image is uploaded\n        return false;\n      }\n\n      return true;\n    }\n\n    return false;\n  };\n\n  const onChangeText = (newText: string) => {\n    if (sending.current) {\n      return;\n    }\n    setText(newText);\n\n    if (newText && channel) {\n      logChatPromiseExecution(channel.keystroke(), 'start typing event');\n    }\n\n    if (onChangeTextProp) {\n      onChangeTextProp(newText);\n    }\n  };\n\n  const onSelectItem = (item: UserResponse<Us>) => {\n    setMentionedUsers((prevMentionedUsers) => [...prevMentionedUsers, item.id]);\n  };\n\n  const pickFile = async () => {\n    if (\n      (maxNumberOfFiles && numberOfUploads >= maxNumberOfFiles) ||\n      numberOfUploads > 10\n    ) {\n      return;\n    }\n\n    const result = await pickDocument({ maxNumberOfFiles });\n    if (!result.cancelled && result.docs) {\n      result.docs.forEach((doc) => {\n        const mimeType = lookup(doc.name);\n\n        if (mimeType && mimeType?.startsWith('image/')) {\n          uploadNewImage(doc);\n        } else {\n          uploadNewFile(doc);\n        }\n      });\n    }\n  };\n\n  const pickImage = async () => {\n    if (\n      (maxNumberOfFiles && numberOfUploads >= maxNumberOfFiles) ||\n      numberOfUploads > 10\n    ) {\n      return;\n    }\n\n    const result = await pickImageNative({\n      compressImageQuality,\n      maxNumberOfFiles,\n    });\n\n    if (!result.cancelled && result.images) {\n      result.images.forEach((image) => {\n        uploadNewImage(image);\n      });\n    }\n  };\n\n  const removeFile = (id: string) => {\n    if (fileUploads.some((file) => file.id === id)) {\n      setFileUploads((prevFileUploads) =>\n        prevFileUploads.filter((file) => file.id !== id),\n      );\n      setNumberOfUploads((prevNumberOfUploads) => prevNumberOfUploads - 1);\n    }\n  };\n\n  const removeImage = (id: string) => {\n    if (imageUploads.some((image) => image.id === id)) {\n      setImageUploads((prevImageUploads) =>\n        prevImageUploads.filter((image) => image.id !== id),\n      );\n      setNumberOfUploads((prevNumberOfUploads) => prevNumberOfUploads - 1);\n    }\n  };\n\n  const handleOnPress = async () => {\n    if (\n      (maxNumberOfFiles && numberOfUploads >= maxNumberOfFiles) ||\n      numberOfUploads >= 10\n    ) {\n      return;\n    }\n\n    if (hasImagePicker) {\n      if (hasFilePicker) {\n        await Keyboard.dismiss();\n        if (attachActionSheet?.current) {\n          attachActionSheet.current.show();\n        }\n      } else {\n        pickImage();\n      }\n    } else if (hasFilePicker) {\n      pickFile();\n    }\n  };\n\n  const renderInputContainer = () => {\n    const additionalTextInputContainerProps = {\n      editable: disabled ? false : undefined,\n      ...additionalTextInputProps,\n    };\n\n    const triggerSettings = channel\n      ? ACITriggerSettings<At, Ch, Co, Ev, Me, Re, Us>({\n          channel,\n          onMentionSelectItem: onSelectItem,\n          t,\n        })\n      : ({} as TriggerSettings<Co, Us>);\n\n    return (\n      <Container imageUploads={imageUploads}>\n        {fileUploads && (\n          <FileUploadPreview\n            AttachmentFileIcon={AttachmentFileIcon}\n            fileUploads={fileUploads}\n            removeFile={removeFile}\n            retryUpload={uploadFile}\n          />\n        )}\n        {imageUploads && (\n          <ImageUploadPreview\n            imageUploads={imageUploads}\n            removeImage={removeImage}\n            retryUpload={uploadImage}\n          />\n        )}\n\n        {/**\n         * TODO: Use custom action sheet to show icon with titles of button. But it doesn't\n         * work well with async onPress operations. So find a solution.\n         */}\n        <ActionSheetAttachment\n          closeAttachActionSheet={closeAttachActionSheet}\n          pickFile={pickFile}\n          pickImage={pickImage}\n          setAttachActionSheetRef={setAttachActionSheetRef}\n          styles={actionSheetStyles}\n        />\n        <InputBoxContainer ref={setInputBoxContainerRef}>\n          {Input ? (\n            <Input\n              _pickFile={pickFile}\n              _pickImage={pickImage}\n              _removeFile={removeFile}\n              _removeImage={removeImage}\n              _uploadFile={uploadFile}\n              _uploadImage={uploadImage}\n              additionalTextInputProps={additionalTextInputContainerProps}\n              appendText={appendText}\n              closeAttachActionSheet={closeAttachActionSheet}\n              disabled={disabled}\n              getUsers={getUsers}\n              handleOnPress={handleOnPress}\n              isValidMessage={isValidMessage}\n              onChange={onChangeText}\n              onSelectItem={onSelectItem}\n              sendMessage={sendMessage}\n              setInputBoxContainerRef={setInputBoxContainerRef}\n              setInputBoxRef={setInputBoxRef}\n              triggerSettings={triggerSettings}\n              updateMessage={updateMessage}\n              uploadNewFile={uploadNewFile}\n              uploadNewImage={uploadNewImage}\n              value={text}\n            />\n          ) : (\n            <>\n              {(hasImagePicker || hasFilePicker) && (\n                <AttachButton\n                  disabled={disabled}\n                  handleOnPress={handleOnPress}\n                />\n              )}\n              <AutoCompleteInput<Co, Us>\n                additionalTextInputProps={additionalTextInputProps || {}}\n                onChange={onChangeText}\n                setInputBoxRef={setInputBoxRef}\n                triggerSettings={triggerSettings}\n                value={text}\n              />\n              <SendButton<At, Ch, Co, Ev, Me, Re, Us>\n                disabled={disabled || sending.current || !isValidMessage()}\n                sendMessage={sendMessage}\n              />\n            </>\n          )}\n        </InputBoxContainer>\n      </Container>\n    );\n  };\n\n  const sendMessage = async () => {\n    if (sending.current) {\n      return;\n    }\n    sending.current = true;\n\n    const prevText = text;\n    await setText('');\n    if (inputBoxRef.current) {\n      inputBoxRef.current.clear();\n    }\n\n    const attachments = [] as Array<Attachment<At>>;\n    for (const image of imageUploads) {\n      if (!image || image.state === FileState.UPLOAD_FAILED) {\n        continue;\n      }\n\n      if (image.state === FileState.UPLOADING) {\n        // TODO: show error to user that they should wait until image is uploaded\n        if (sendImageAsync) {\n          /**\n           * If user hit send before image uploaded, push ID into a queue to later\n           * be matched with the successful CDN response\n           */\n          setAsyncIds((prevAsyncIds) => [...prevAsyncIds, image.id]);\n        } else {\n          sending.current = false;\n          return setText(prevText);\n        }\n      }\n\n      if (image.state === FileState.UPLOADED) {\n        attachments.push({\n          fallback: image.file.name,\n          image_url: image.url,\n          type: 'image',\n        } as Attachment<At>);\n      }\n    }\n\n    for (const file of fileUploads) {\n      if (!file || file.state === FileState.UPLOAD_FAILED) {\n        continue;\n      }\n      if (file.state === FileState.UPLOADING) {\n        // TODO: show error to user that they should wait until image is uploaded\n        sending.current = false;\n        return;\n      }\n      if (file.state === FileState.UPLOADED) {\n        attachments.push({\n          asset_url: file.url,\n          file_size: file.file.size,\n          mime_type: file.file.type,\n          title: file.file.name,\n          type: 'file',\n        } as Attachment<At>);\n      }\n    }\n\n    // Disallow sending message if its empty.\n    if (!prevText && attachments.length === 0) {\n      sending.current = false;\n      return;\n    }\n\n    if (editing && !isEditingBoolean(editing)) {\n      const updatedMessage = {\n        ...editing,\n        attachments,\n        mentioned_users: mentionedUsers,\n        text: prevText,\n      } as StreamMessage<At, Me, Us>;\n\n      // TODO: Remove this line and show an error when submit fails\n      clearEditingState();\n\n      const updateMessagePromise = editMessage(updatedMessage).then(\n        clearEditingState,\n      );\n      logChatPromiseExecution(updateMessagePromise, 'update message');\n\n      sending.current = false;\n    } else {\n      try {\n        sendMessageContext(({\n          attachments,\n          mentioned_users: uniq(mentionedUsers),\n          parent_id,\n          text: prevText,\n          show_in_channel: true\n        } as unknown) as StreamMessage<At, Me, Us>);\n\n        sending.current = false;\n        setFileUploads([]);\n        setImageUploads([]);\n        setMentionedUsers([]);\n        setNumberOfUploads(\n          (prevNumberOfUploads) =>\n            prevNumberOfUploads - (attachments?.length || 0),\n        );\n        setText('');\n      } catch (_error) {\n        sending.current = false;\n        setText(prevText);\n        console.log('Failed to send message');\n      }\n    }\n  };\n\n  const setAttachActionSheetRef = (ref: ActionSheetCustom | null) => {\n    attachActionSheet.current = ref;\n  };\n\n  const setInputBoxRef = (ref: TextInput | null) => {\n    inputBoxRef.current = ref;\n    if (setInputRef) {\n      setInputRef(ref);\n    }\n  };\n\n  const updateMessage = async () => {\n    try {\n      if (!isEditingBoolean(editing)) {\n        await client.updateMessage({\n          ...editing,\n          text,\n        } as StreamMessage<At, Me, Us>);\n      }\n\n      setText('');\n      clearEditingState();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const uploadFile = async ({ newFile }: { newFile: FileUpload }) => {\n    if (!newFile) {\n      return;\n    }\n    const { file, id } = newFile;\n\n    await setFileUploads((prevFileUploads) =>\n      prevFileUploads.map((fileUpload) => {\n        if (fileUpload.id === id) {\n          return {\n            ...fileUpload,\n            state: FileState.UPLOADING,\n          };\n        }\n        return fileUpload;\n      }),\n    );\n\n    let response = {} as SendFileAPIResponse;\n    try {\n      if (doDocUploadRequest) {\n        response = await doDocUploadRequest(file, channel);\n      } else if (channel && file.uri) {\n        response = await channel.sendFile(file.uri, file.name, file.type);\n      }\n    } catch (error) {\n      console.warn(error);\n      if (!newFile) {\n        setNumberOfUploads((prevNumberOfUploads) => prevNumberOfUploads - 1);\n      } else {\n        setFileUploads((prevFileUploads) =>\n          prevFileUploads.map((fileUpload) => {\n            if (fileUpload.id === id) {\n              return {\n                ...fileUpload,\n                state: FileState.UPLOAD_FAILED,\n              };\n            }\n            return fileUpload;\n          }),\n        );\n        setNumberOfUploads((prevNumberOfUploads) => prevNumberOfUploads - 1);\n      }\n      return;\n    }\n\n    setFileUploads((prevFileUploads) =>\n      prevFileUploads.map((fileUpload) => {\n        if (fileUpload.id === id) {\n          return {\n            ...fileUpload,\n            state: FileState.UPLOADED,\n            url: response.file,\n          };\n        }\n        return fileUpload;\n      }),\n    );\n  };\n\n  const uploadImage = async ({ newImage }: { newImage: ImageUpload }) => {\n    const { file, id } = newImage || {};\n    if (!file) {\n      return;\n    }\n\n    let response = {} as SendFileAPIResponse;\n\n    const filename = (file.name || file.uri || '').replace(\n      /^(file:\\/\\/|content:\\/\\/)/,\n      '',\n    );\n    const contentType = lookup(filename) || 'multipart/form-data';\n\n    try {\n      if (doImageUploadRequest) {\n        response = await doImageUploadRequest(file, channel);\n      } else if (file.uri && channel) {\n        if (sendImageAsync) {\n          channel.sendImage(file.uri, undefined, contentType).then((res) => {\n            if (asyncIds.includes(id)) {\n              // Evaluates to true if user hit send before image successfully uploaded\n              setAsyncUploads((prevAsyncUploads) => {\n                prevAsyncUploads[id] = {\n                  ...prevAsyncUploads[id],\n                  state: FileState.UPLOADED,\n                  url: res.file,\n                };\n                return prevAsyncUploads;\n              });\n            } else {\n              setImageUploads((prevImageUploads) =>\n                prevImageUploads.map((imageUpload) => {\n                  if (imageUpload.id === id) {\n                    return {\n                      ...imageUpload,\n                      state: FileState.UPLOADED,\n                      url: res.file,\n                    };\n                  }\n                  return imageUpload;\n                }),\n              );\n            }\n          });\n        } else {\n          response = await channel.sendImage(file.uri, undefined, contentType);\n        }\n      }\n\n      if (Object.keys(response).length) {\n        setImageUploads((prevImageUploads) =>\n          prevImageUploads.map((imageUpload) => {\n            if (imageUpload.id === id) {\n              return {\n                ...imageUpload,\n                state: FileState.UPLOADED,\n                url: response.file,\n              };\n            }\n            return imageUpload;\n          }),\n        );\n      }\n    } catch (error) {\n      console.warn(error);\n      if (newImage) {\n        setImageUploads((prevImageUploads) =>\n          prevImageUploads.map((imageUpload) => {\n            if (imageUpload.id === id) {\n              return {\n                ...imageUpload,\n                state: FileState.UPLOAD_FAILED,\n              };\n            }\n            return imageUpload;\n          }),\n        );\n      }\n      setNumberOfUploads((prevNumberOfUploads) => prevNumberOfUploads - 1);\n\n      return;\n    }\n  };\n\n  const uploadNewFile = async (file: {\n    name: string;\n    size?: number | string;\n    type?: string;\n    uri?: string;\n  }) => {\n    const id = generateRandomId();\n    const mimeType = lookup(file.name);\n    const newFile = {\n      file: { ...file, type: mimeType || file?.type },\n      id,\n      state: FileState.UPLOADING,\n    };\n    await Promise.all([\n      setFileUploads((prevFileUploads) => prevFileUploads.concat([newFile])),\n      setNumberOfUploads((prevNumberOfUploads) => prevNumberOfUploads + 1),\n    ]);\n\n    uploadFile({ newFile });\n  };\n\n  const uploadNewImage = async (image: { uri?: string }) => {\n    const id = generateRandomId();\n    const newImage = {\n      file: image,\n      id,\n      state: FileState.UPLOADING,\n    };\n    await Promise.all([\n      setImageUploads((prevImageUploads) =>\n        prevImageUploads.concat([newImage]),\n      ),\n      setNumberOfUploads((prevNumberOfUploads) => prevNumberOfUploads + 1),\n    ]);\n\n    uploadImage({ newImage });\n  };\n\n  return editing ? (\n    <EditingBoxContainer testID='editing'>\n      <EditingBoxHeader>\n        <EditingBoxHeaderTitle>{t('Editing Message')}</EditingBoxHeaderTitle>\n        <IconSquare\n          icon={iconClose}\n          onPress={() => {\n            clearEditingState();\n            setText('');\n          }}\n        />\n      </EditingBoxHeader>\n      {renderInputContainer()}\n    </EditingBoxContainer>\n  ) : (\n    renderInputContainer()\n  );\n};\n"]}