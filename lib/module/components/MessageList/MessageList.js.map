{"version":3,"sources":["MessageList.tsx"],"names":["ErrorNotification","styled","View","theme","messageList","errorNotification","css","ErrorNotificationText","Text","errorNotificationText","ListContainer","FlatList","listContainer","keyExtractor","item","id","created_at","toISOString","date","MessageList","props","actionSheetStyles","additionalFlatListProps","AttachmentFileIcon","DateSeparator","DefaultDateSeparator","disableWhileEditing","dismissKeyboardOnMessageTouch","HeaderComponent","MessageFromProps","Message","MessageSystem","DefaultMessageSystem","messageActions","noGroupByUser","onThreadSelect","setFlatListRef","threadList","TypingIndicator","DefaultTypingIndicator","channel","disabled","EmptyStateIndicator","loading","LoadingIndicator","markRead","client","isOnline","clearEditingState","editing","mainLoadMore","loadMore","MessageFromContext","loadMoreThread","t","flatListRef","yOffset","lastReceivedId","setLastReceivedId","newMessagesNotification","setNewMessageNotification","messagesLoading","setMessagesLoading","currentLastMessage","currentLastReceivedId","hasNewMessage","userScrolledUp","current","isOwner","user","userID","scrollToBottom","scrollToIndex","index","renderItem","message","type","groupStyles","undefined","readBy","handleScroll","event","y","nativeEvent","contentOffset","removeNewMessageNotification","countUnread","goToNewMessages","length","flex","alignItems","width","autoscrollToTopThreshold","minIndexForVisible","fl","backgroundColor","height","opacity","position","zIndex"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport {\n  FlatList,\n  FlatListProps,\n  ScrollViewProps,\n  TouchableOpacity,\n  View,\n} from 'react-native';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport {\n  DateSeparatorProps,\n  DateSeparator as DefaultDateSeparator,\n} from './DateSeparator';\nimport { MessageNotification } from './MessageNotification';\nimport {\n  MessageSystem as DefaultMessageSystem,\n  MessageSystemProps,\n} from './MessageSystem';\nimport {\n  TypingIndicator as DefaultTypingIndicator,\n  TypingIndicatorProps,\n} from './TypingIndicator';\nimport { TypingIndicatorContainer } from './TypingIndicatorContainer';\n\nimport { useMessageList } from './hooks/useMessageList';\nimport { getLastReceivedMessage } from './utils/getLastReceivedMessage';\nimport { isDateSeparator, MessageOrDate } from './utils/insertDates';\n\nimport { Message as DefaultMessage } from '../Message/Message';\n\nimport { useChannelContext } from '../../contexts/channelContext/ChannelContext';\nimport { useChatContext } from '../../contexts/chatContext/ChatContext';\nimport {\n  GroupType,\n  useMessagesContext,\n} from '../../contexts/messagesContext/MessagesContext';\nimport {\n  ThreadContextValue,\n  useThreadContext,\n} from '../../contexts/threadContext/ThreadContext';\nimport { useTranslationContext } from '../../contexts/translationContext/TranslationContext';\nimport { styled } from '../../styles/styledComponents';\n\nimport type { UserResponse } from 'stream-chat';\n\nimport type { FileIconProps } from '../Attachment/FileIcon';\nimport type { ActionSheetStyles } from '../Message/MessageSimple/MessageActionSheet';\nimport type { MessageSimpleProps } from '../Message/MessageSimple/MessageSimple';\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../types/types';\n\nconst ErrorNotification = styled.View`\n  align-items: center;\n  background-color: #fae6e8;\n  color: red;\n  padding: 5px;\n  z-index: 10;\n  ${({ theme }) => theme.messageList.errorNotification.css}\n`;\n\nconst ErrorNotificationText = styled.Text`\n  background-color: #fae6e8;\n  color: red;\n  ${({ theme }) => theme.messageList.errorNotificationText.css}\n`;\n\nconst ListContainer = (styled(FlatList)`\n  flex: 1;\n  padding-horizontal: 10px;\n  width: 100%;\n  ${({ theme }) => theme.messageList.listContainer.css}\n` as React.ComponentType) as new <T>() => FlatList<T>;\n\nconst keyExtractor = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>(\n  item: MessageOrDate<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  if (!isDateSeparator(item)) {\n    return (\n      item.id ||\n      (item.created_at\n        ? typeof item.created_at === 'string'\n          ? item.created_at\n          : item.created_at.toISOString()\n        : uuidv4())\n    );\n  }\n  if (item.date && typeof item.date !== 'string') {\n    return item.date.toISOString();\n  }\n  return uuidv4();\n};\n\nexport type MessageListProps<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n> = {\n  /**\n   * Style object for action sheet (used to message actions).\n   * Supported styles: https://github.com/beefe/react-native-actionsheet/blob/master/lib/styles.js\n   */\n  actionSheetStyles?: ActionSheetStyles;\n  /**\n   * Besides existing (default) UX behavior of underlying FlatList of MessageList component, if you want\n   * to attach some additional props to underlying FlatList, you can add it to following prop.\n   *\n   * You can find list of all the available FlatList props here - https://facebook.github.io/react-native/docs/flatlist#props\n   *\n   * **NOTE** Don't use `additionalFlatListProps` to get access to ref of flatlist. Use `setFlatListRef` instead.\n   *\n   * e.g.\n   * ```js\n   * <MessageList\n   *  additionalFlatListProps={{ bounces: true, keyboardDismissMode: true }} />\n   * ```\n   */\n  additionalFlatListProps?: Partial<\n    FlatListProps<MessageOrDate<At, Ch, Co, Ev, Me, Re, Us>>\n  >;\n  /**\n   * Custom UI component for attachment icon for type 'file' attachment.\n   * Defaults to: https://github.com/GetStream/stream-chat-react-native/blob/master/src/components/Attachment/FileIcon.tsx\n   */\n  AttachmentFileIcon?: React.ComponentType<FileIconProps>;\n  /**\n   * Date separator UI component to render\n   *\n   * Defaults to and accepts same props as: [DateSeparator](https://getstream.github.io/stream-chat-react-native/#dateseparator)\n   */\n  DateSeparator?: React.ComponentType<\n    DateSeparatorProps<At, Ch, Co, Ev, Me, Re, Us>\n  >;\n  disableWhileEditing?: boolean;\n  /** Should keyboard be dismissed when messaged is touched */\n  dismissKeyboardOnMessageTouch?: boolean;\n  /**\n   * UI component for header of message list. By default message list doesn't have any header.\n   * This is basically a [ListFooterComponent](https://facebook.github.io/react-native/docs/flatlist#listheadercomponent) of FlatList\n   * used in MessageList. Its footer instead of header, since message list is inverted.\n   *\n   */\n  HeaderComponent?: React.ReactElement;\n  /**\n   * Custom UI component to display a message in MessageList component\n   * Default component (accepts the same props): [MessageSimple](https://getstream.github.io/stream-chat-react-native/#messagesimple)\n   */\n  Message?: React.ComponentType<MessageSimpleProps<At, Ch, Co, Ev, Me, Re, Us>>;\n  /**\n   * Array of allowed actions on message. e.g. ['edit', 'delete', 'reactions', 'reply']\n   * If all the actions need to be disabled, empty array or false should be provided as value of prop.\n   */\n  messageActions?: boolean | string[];\n  /**\n   * Custom UI component to display a system message\n   * Default component (accepts the same props): [MessageSystem](https://getstream.github.io/stream-chat-react-native/#messagesystem)\n   */\n  MessageSystem?: React.ComponentType<\n    MessageSystemProps<At, Ch, Co, Ev, Me, Re, Us>\n  >;\n  /** Turn off grouping of messages by user */\n  noGroupByUser?: boolean;\n  /**\n   * Handler to open the thread on message. This is callback for touch event for replies button.\n   *\n   * @param message A message object to open the thread upon.\n   */\n  onThreadSelect?: (\n    message: ThreadContextValue<At, Ch, Co, Ev, Me, Re, Us>['thread'],\n  ) => void;\n  /**\n   * Use `setFlatListRef` to get access to ref to inner FlatList.\n   *\n   * e.g.\n   * ```js\n   * <MessageList\n   *  setFlatListRef={(ref) => {\n   *    // Use ref for your own good\n   *  }}\n   * ```\n   */\n  setFlatListRef?: (\n    ref: FlatList<MessageOrDate<At, Ch, Co, Ev, Me, Re, Us>> | null,\n  ) => void;\n  /** Whether or not the MessageList is part of a Thread */\n  threadList?: boolean;\n  /**\n   * Typing indicator UI component to render\n   *\n   * Defaults to and accepts same props as: [TypingIndicator](https://getstream.github.io/stream-chat-react-native/#typingindicator)\n   */\n  TypingIndicator?: React.ComponentType<TypingIndicatorProps>;\n};\n\n/**\n * The message list component renders a list of messages. It consumes the following contexts:\n *\n * [ChannelContext](https://getstream.github.io/stream-chat-react-native/#channelcontext)\n * [ChatContext](https://getstream.github.io/stream-chat-react-native/#chatcontext)\n * [MessagesContext](https://getstream.github.io/stream-chat-react-native/#messagescontext)\n * [ThreadContext](https://getstream.github.io/stream-chat-react-native/#threadcontext)\n * [TranslationContext](https://getstream.github.io/stream-chat-react-native/#translationcontext)\n *\n * @example ./MessageList.md\n */\nexport const MessageList = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>(\n  props: MessageListProps<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const {\n    actionSheetStyles,\n    additionalFlatListProps,\n    AttachmentFileIcon,\n    DateSeparator = DefaultDateSeparator,\n    disableWhileEditing = true,\n    dismissKeyboardOnMessageTouch = true,\n    HeaderComponent,\n    Message: MessageFromProps,\n    MessageSystem = DefaultMessageSystem,\n    messageActions,\n    noGroupByUser,\n    onThreadSelect,\n    setFlatListRef,\n    threadList,\n    TypingIndicator = DefaultTypingIndicator,\n  } = props;\n\n  const {\n    channel,\n    disabled,\n    EmptyStateIndicator,\n    loading,\n    LoadingIndicator,\n    markRead,\n  } = useChannelContext<At, Ch, Co, Ev, Me, Re, Us>();\n  const { client, isOnline } = useChatContext<At, Ch, Co, Ev, Me, Re, Us>();\n  const {\n    clearEditingState,\n    editing,\n    loadMore: mainLoadMore,\n    Message: MessageFromContext,\n  } = useMessagesContext<At, Ch, Co, Ev, Me, Re, Us>();\n  const { loadMoreThread } = useThreadContext<At, Ch, Co, Ev, Me, Re, Us>();\n  const { t } = useTranslationContext();\n\n  const messageList = useMessageList<At, Ch, Co, Ev, Me, Re, Us>({\n    noGroupByUser,\n    threadList,\n  });\n\n  const flatListRef = useRef<FlatList<\n    MessageOrDate<At, Ch, Co, Ev, Me, Re, Us>\n  > | null>(null);\n  const yOffset = useRef(0);\n\n  const [lastReceivedId, setLastReceivedId] = useState(\n    getLastReceivedMessage(messageList)?.id,\n  );\n  const [newMessagesNotification, setNewMessageNotification] = useState(false);\n\n  /**\n   * In order to prevent the LoadingIndicator component from showing up briefly on mount,\n   * we set the loading state one cycle behind to ensure the messages are set before the\n   * change to the loading state is registered.\n   */\n  const [messagesLoading, setMessagesLoading] = useState(false);\n  useEffect(() => {\n    setMessagesLoading(!!loading);\n  }, [loading]);\n\n  useEffect(() => {\n    const currentLastMessage = getLastReceivedMessage(messageList);\n    if (currentLastMessage) {\n      const currentLastReceivedId = currentLastMessage.id;\n      if (currentLastReceivedId) {\n        const hasNewMessage = lastReceivedId !== currentLastReceivedId;\n        const userScrolledUp = yOffset.current > 0;\n        const isOwner =\n          currentLastMessage &&\n          client &&\n          currentLastMessage.user?.id === client.userID;\n\n        // always scroll down when it's your own message that you added..\n        const scrollToBottom = hasNewMessage && (isOwner || !userScrolledUp);\n\n        // Check the scroll position... if you're scrolled up show a little notification\n        if (!scrollToBottom && hasNewMessage && !newMessagesNotification) {\n          setNewMessageNotification(true);\n        }\n\n        // remove the scroll notification when we scroll down...\n        if (scrollToBottom && flatListRef.current) {\n          flatListRef.current.scrollToIndex({ index: 0 });\n          setNewMessageNotification(false);\n        }\n\n        if (hasNewMessage) setLastReceivedId(currentLastReceivedId);\n      }\n    }\n  }, [messageList]);\n\n  const loadMore = threadList ? loadMoreThread : mainLoadMore;\n\n  const Message = MessageFromProps || MessageFromContext;\n\n  const renderItem = (message: MessageOrDate<At, Ch, Co, Ev, Me, Re, Us>) => {\n    if (isDateSeparator(message)) {\n      return <DateSeparator message={message} />;\n    }\n    if (message.type === 'system') {\n      return <MessageSystem message={message} />;\n    }\n    if (message.type !== 'message.read') {\n      return (\n        <DefaultMessage<At, Ch, Co, Ev, Me, Re, Us>\n          actionSheetStyles={actionSheetStyles}\n          AttachmentFileIcon={AttachmentFileIcon}\n          dismissKeyboardOnMessageTouch={dismissKeyboardOnMessageTouch}\n          groupStyles={message.groupStyles as GroupType[]}\n          lastReceivedId={\n            lastReceivedId === message.id ? lastReceivedId : undefined\n          }\n          Message={Message}\n          message={message}\n          messageActions={messageActions}\n          onThreadSelect={onThreadSelect}\n          readBy={(message.readBy as UserResponse<Us>[]) || []}\n          threadList={threadList}\n        />\n      );\n    }\n    return null;\n  };\n\n  const handleScroll: ScrollViewProps['onScroll'] = (event) => {\n    const y = event.nativeEvent.contentOffset.y;\n    const removeNewMessageNotification = y <= 0;\n    if (\n      !threadList &&\n      removeNewMessageNotification &&\n      channel &&\n      channel.countUnread() > 0\n    ) {\n      markRead();\n    }\n\n    yOffset.current = y;\n    if (removeNewMessageNotification) {\n      setNewMessageNotification(false);\n    }\n  };\n\n  const goToNewMessages = () => {\n    if (flatListRef.current) {\n      flatListRef.current.scrollToIndex({ index: 0 });\n      setNewMessageNotification(false);\n      if (!threadList) markRead();\n    }\n  };\n\n  // We can't provide ListEmptyComponent to FlatList when inverted flag is set.\n  // https://github.com/facebook/react-native/issues/21196\n  if (messageList.length === 0 && !threadList) {\n    return messagesLoading ? (\n      <LoadingIndicator listType='message' />\n    ) : (\n      <View style={{ flex: 1 }} testID='empty-state'>\n        <EmptyStateIndicator listType='message' />\n      </View>\n    );\n  }\n\n  return (\n    <>\n      <View\n        collapsable={false}\n        style={{ alignItems: 'center', flex: 1, width: '100%' }}\n      >\n        <ListContainer\n          data={messageList}\n          /** Disables the MessageList UI. Which means, message actions, reactions won't work. */\n          extraData={disabled}\n          inverted\n          keyboardShouldPersistTaps='always'\n          keyExtractor={keyExtractor}\n          ListFooterComponent={HeaderComponent}\n          maintainVisibleContentPosition={{\n            autoscrollToTopThreshold: 10,\n            minIndexForVisible: 1,\n          }}\n          onEndReached={loadMore}\n          onScroll={handleScroll}\n          ref={(fl) => {\n            flatListRef.current = fl;\n            if (setFlatListRef) {\n              setFlatListRef(fl);\n            }\n          }}\n          renderItem={({ item }) => renderItem(item)}\n          testID='message-flat-list'\n          {...additionalFlatListProps}\n        />\n        {TypingIndicator && (\n          <TypingIndicatorContainer<At, Ch, Co, Ev, Me, Re, Us>>\n            <TypingIndicator />\n          </TypingIndicatorContainer>\n        )}\n        {newMessagesNotification && (\n          <MessageNotification\n            onPress={goToNewMessages}\n            showNotification={newMessagesNotification}\n          />\n        )}\n        {!isOnline && (\n          <ErrorNotification testID='error-notification'>\n            <ErrorNotificationText>\n              {t('Connection failure, reconnecting now ...')}\n            </ErrorNotificationText>\n          </ErrorNotification>\n        )}\n      </View>\n      {\n        // Mask for edit state\n        editing && disableWhileEditing && (\n          <TouchableOpacity\n            onPress={clearEditingState}\n            style={{\n              backgroundColor: 'black',\n              height: '100%',\n              opacity: 0.4,\n              position: 'absolute',\n              width: '100%',\n              zIndex: 100,\n            }}\n          />\n        )\n      }\n    </>\n  );\n};\n"]}